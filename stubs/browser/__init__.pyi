# derived from https://raw.githubusercontent.com/yaneurao/yanesdk-for-brython/main/yanesdk/browser.py

from typing import Any, Callable, Mapping

from . import timer

class Touch:
    @property
    def clientX(self) -> int: ...
    @property
    def clientY(self) -> int: ...
    @property
    def identifier(self) -> int: ...

class DOMEvent:
    @property
    def keyCode(self) -> int: ...
    @property
    def offsetX(self) -> int: ...
    @property
    def offsetY(self) -> int: ...
    @property
    def buttons(self) -> int: ...
    @property
    def touches(self) -> list[Touch]: ...
    def preventDefault(self) -> None: ...
    def stopPropagation(self) -> None: ...

class TextMetrics: ...

class HtmlImage:
    def __setitem__(self, name: str, value: str) -> "DOMNode": ...

class CanvasRenderingContext:
    fillStyle: str
    strokeStyle: str
    font: str
    textBaseline: str
    def fillRect(
        self,
        x: int | float,
        y: int | float,
        w: int | float,
        h: int | float,
    ) -> None: ...
    def fillText(self, text: str, x: int | float, y: int | float) -> None: ...
    def strokeRect(
        self, x: int | float, y: int | float, w: int | float, h: int | float
    ) -> None: ...
    def drawImage(
        self,
        image: HtmlImage,
        sx: int | float,
        sy: int | float,
        sw: int | float,
        sh: int | float,
        px: int | float,
        py: int | float,
        dw: int | float,
        dh: int | float,
    ) -> None: ...
    def measureText(self, text: str) -> TextMetrics: ...

class ImageCreator:
    def new(self) -> HtmlImage: ...

class IntervalHandle: ...

class window:
    Image = ImageCreator()

    @staticmethod
    def setInterval(callback: Callable[[], None], t: int | float) -> IntervalHandle: ...
    @staticmethod
    def clearInterval(handle: IntervalHandle) -> None: ...

class DOMNode:
    @property
    def nodeValue(self) -> str: ...
    @nodeValue.setter
    def nodeValue(self, value: str) -> None: ...
    def insertBefore(
        self, newDOMNode: "DOMNode", referenceDOMNode: "DOMNode" | None
    ) -> None: ...
    def removeChild(self, child: "DOMNode") -> None: ...
    def createTextNode(self, text: str) -> "DOMNode": ...
    def createElement(self, name: str, options: Mapping[str, Any]) -> "DOMNode": ...
    def addEventListener(
        self, eventName: str, callback: Callable[[DOMEvent], None]
    ) -> None: ...
    def removeEventListener(
        self, eventName: str, callback: Callable[[DOMEvent], None]
    ) -> None: ...
    def __getitem__(self, name: str) -> "DOMNode": ...
    def __setitem__(self, name: str, value: str) -> "DOMNode": ...
    def getContext(self, name: str) -> CanvasRenderingContext: ...
    def __le__(self, other: "DOMNode" | list["DOMNode"]) -> None: ...
    def setAttribute(self, name: str, value: str) -> None: ...
    def removeAttribute(self, name: str) -> None: ...

document = DOMNode()

class dialog: ...

class widgets:
    dialog: dialog
